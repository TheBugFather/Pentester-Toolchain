""" Built-in modules """
import logging
import re
import sys
from pathlib import Path
# Custom Modules #
from Modules.utils import file_handler, print_err


def main():
    """
    Facilitate various scans and pentesting tools, saving output results, and chaining tool
    executions based on regular expression parsing on scan output.

    :return:  Nothing
    """
    # TODO service ports to consider
    # 135 - Windows RPC
    # 139 - Windows Netbios-ssn

    # TODO Add more regex for various ports depending on intended functionality
    # Regex for matching http(s) web ports #
    re_web = re.compile(r'(?:80|443)/tcp {2,6}open')
    # Regex for matching sql port #
    re_sql = re.compile(r'3306/tcp {2,6}open')
    # Regex for matching ssh port #
    re_ssh = re.compile(r'22/tcp {2,6}open')
    # Regex for matching ftp port #
    re_ftp = re.compile(r'21/tcp {2,6}open')

    # TODO Add nmap functionality when reactive scanning system is set and reliable testing resources are in place

    filename = './nmapSampleOutputs/blueprint_nmapOut.txt'

    # Read the nmap scan output #
    nmap_output = file_handler(filename, 'r')

    # TODO run all compiled regex of potential ports of interest on nmap scan output
    # Check nmap scan output for open web ports #
    web_match = re.search(re_web, nmap_output)
    # Check nmap scan output for open SQL port #
    sql_match = re.search(re_sql, nmap_output)
    # Check nmap scan output for open ssh port #
    ssh_match = re.search(re_ssh, nmap_output)
    # Check nmap scan output for open ftp port #
    ftp_match = re.search(re_ftp, nmap_output)

    # If there were open http(s) ports #
    if web_match:
        print('Open web ports regex successfully matched!\n')

        # TODO Run general web application tools for any kind of server framework

        # TODO Figure out the specific framework of web server and run tools targets for that framework

        # TODO analyze results for potential CVE's and exploits

    # If the sql port is open #
    if sql_match:
        print('Open SQL port regex successfully matched\n')

        # TODO Run tools potential identify and exploit sql vulnerabilities

    # If ssh port is open #
    if ssh_match:
        print('Open ssh port regex successfully matched!\n')

        # TODO Run tools to potentially identify and exploit ssh vulnerabilities

    # If the ftp port is open #
    if ftp_match:
        print('Open ftp port regex successfully matched!\n')

        # TODO Run tools to potentially identify and exploit vulnerabilities


if __name__ == '__main__':
    RET = 0
    cwd = Path('.')
    scan_dir = cwd / 'ScanReports'
    log_file = cwd / 'pentester_automater.log'

    # Set the log file name #
    logging.basicConfig(filename=log_file, level=logging.DEBUG,
                        format='%(asctime)s line%(lineno)d::%(funcName)s[%(levelname)s]>>'
                               ' %(message)s', datefmt='%Y-%m-%d %H:%M:%S')

    # If the scan output directory does not exist #
    if not scan_dir.exists():
        # Create the scan directory #
        scan_dir.mkdir()

    try:
        main()

    # If unknown exception occurs #
    except Exception as ex:
        print_err(f'Unknown exception occurred: {ex}')
        logging.exception('Unknown exception occurred: %s\n\n', ex)
        RET = 1

    sys.exit(RET)
