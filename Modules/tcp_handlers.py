""" Custom modules """
from Modules.utils import service_handler


def ftp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the ftp output file path #
    ftp_path = paths[1] / 'ftp_out.txt'
    # Execute service handler for ftp #
    service_handler(config, re_obj, log_tuple, config.ftp, config.ftp_custom, ftp_path,
                    [ip_addr, port_num])


def ssh_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the ssh output file path #
    ssh_path = paths[1] / 'ssh_out.txt'
    # Execute service handler for ssh #
    service_handler(config, re_obj, log_tuple, config.ssh, config.ssh_custom, ssh_path,
                    [ip_addr, port_num])


def telnet_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                   log_tuple: tuple):
    # Set the telnet output file path #
    telnet_path = paths[1] / 'telnet_out.txt'
    # Execute service handler for telnet #
    service_handler(config, re_obj, log_tuple, config.telnet, config.telnet_custom, telnet_path,
                    [ip_addr, port_num])


def smtp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the smtp output file path #
    smtp_path = paths[1] / 'smtp_out.txt'
    # Execute service handler for telnet #
    service_handler(config, re_obj, log_tuple, config.smtp, config.smtp_custom, smtp_path,
                    [ip_addr, port_num])


def finger_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                   log_tuple: tuple):
    # Set the finger output file path #
    finger_path = paths[1] / 'finger_out.txt'
    # Execute service handler for finger #
    service_handler(config, re_obj, log_tuple, config.finger, config.finger_custom, finger_path,
                    [ip_addr, port_num])


def web_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the web output file path #
    web_path = paths[1] / 'web_out.txt'

    # If the port is a http port #
    if port_num in (80, 8080):
        proto = 'http'
    # If the port is a https port #
    else:
        proto = 'https'

    # Execute service handler for web #
    service_handler(config, re_obj, log_tuple, config.web, config.web_custom, web_path,
                    [ip_addr, port_num, proto])


def pop3_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the pop3 output file path #
    pop3_path = paths[1] / 'pop3_out.txt'
    # Execute service handler for pop3 #
    service_handler(config, re_obj, log_tuple, config.pop3, config.pop3_custom, pop3_path,
                    [ip_addr, port_num])


def nntp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the nntp output file path #
    nntp_path = paths[1] / 'nntp_out.txt'
    # Execute service handler for nntp #
    service_handler(config, re_obj, log_tuple, config.nntp, config.nntp_custom, nntp_path,
                    [ip_addr, port_num])


def imap_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the imap output file path #
    imap_path = paths[1] / 'imap_out.txt'
    # Execute service handler for imap #
    service_handler(config, re_obj, log_tuple, config.imap, config.imap_custom, imap_path,
                    [ip_addr, port_num])


def smux_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the smux output file path #
    smux_path = paths[1] / 'smux_out.txt'
    # Execute service handler for smux #
    service_handler(config, re_obj, log_tuple, config.smux, config.smux_custom, smux_path,
                    [ip_addr, port_num])


def smb_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the smb output file path #
    smb_path = paths[1] / 'smb_out.txt'
    # Execute service handler for smb #
    service_handler(config, re_obj, log_tuple, config.smb, config.smb_custom, smb_path,
                    [ip_addr, port_num])


def rtsp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the rtsp output file path #
    rtsp_path = paths[1] / 'rtsp_out.txt'
    # Execute service handler for rtsp #
    service_handler(config, re_obj, log_tuple, config.rtsp, config.rtsp_custom, rtsp_path,
                    [ip_addr, port_num])


def cups_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the cups output file path #
    cups_path = paths[1] / 'cups_out.txt'
    # Execute service handler for cups #
    service_handler(config, re_obj, log_tuple, config.cups, config.cups_custom, cups_path,
                    [ip_addr, port_num])


def kerbv5_admin_tcp_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                             re_obj: object, log_tuple: tuple):
    # Set the kerberos v5 admin tcp output file path #
    kerbv5_admin_tcp_path = paths[1] / 'kerbv5_admin_tcp_out.txt'
    # Execute service handler for kerberos V5 admin tcp #
    service_handler(config, re_obj, log_tuple, config.kerberos_v5_admin_tcp,
                    config.kerberos_v5_admin_tcp_custom, kerbv5_admin_tcp_path, [ip_addr, port_num])


def kerbv4_passwd_tcp_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                              re_obj: object, log_tuple: tuple):
    # Set the kerberos v5 passwd tcp output file path #
    kerbv4_passwd_tcp_path = paths[1] / 'kerbv4_passwd_tcp_out.txt'
    # Execute service handler for kerberos V4 passwd tcp #
    service_handler(config, re_obj, log_tuple, config.kerberos_v4_passwd_tcp,
                    config.kerberos_v4_passwd_tcp_custom, kerbv4_passwd_tcp_path,
                    [ip_addr, port_num])


def rsync_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                  re_obj: object, log_tuple: tuple):
    # Set the rsync output file path #
    rsync_path = paths[1] / 'rsync_out.txt'
    # Execute service handler for rsync #
    service_handler(config, re_obj, log_tuple, config.rsync, config.rsync_custom, rsync_path,
                    [ip_addr, port_num])


def iis_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the iis output file path #
    iis_path = paths[1] / 'iis_out.txt'
    # Execute service handler for iis #
    service_handler(config, re_obj, log_tuple, config.iis, config.iis_custom, iis_path,
                    [ip_addr, port_num])


def mssql_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                  log_tuple: tuple):
    # Set the mssql output file path #
    mssql_path = paths[1] / 'mssql_out.txt'
    # Execute service handler for mssql #
    service_handler(config, re_obj, log_tuple, config.mssql, config.mssql_custom, mssql_path,
                    [ip_addr, port_num])


def oracle_db_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                      log_tuple: tuple):
    # Set the oracle db output file path #
    oracle_db_path = paths[1] / 'oracle_db_out.txt'
    # Execute service handler for oracle db #
    service_handler(config, re_obj, log_tuple, config.oracle_db, config.oracle_db_custom,
                    oracle_db_path, [ip_addr, port_num])


def oracle_xmldb_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                         log_tuple: tuple):
    # Set the oracle xml db output file path #
    oracle_xmldb_path = paths[1] / 'oracle_xmldb_out.txt'
    # Execute service handler for oracle xmldb #
    service_handler(config, re_obj, log_tuple, config.oracle_xml_db, config.oracle_xml_db_custom,
                    oracle_xmldb_path, [ip_addr, port_num])


def sql_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the sql output file path #
    sql_path = paths[1] / 'sql_out.txt'
    # Execute service handler for mysql #
    service_handler(config, re_obj, log_tuple, config.sql, config.sql_custom, sql_path,
                    [ip_addr, port_num])


def oracle_web_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                       log_tuple: tuple):
    # Set the oracle web output file path #
    oracle_web_path = paths[1] / 'oracle_web_out.txt'
    # Execute service handler for oracle web #
    service_handler(config, re_obj, log_tuple, config.oracle_web, config.oracle_web_custom,
                    oracle_web_path, [ip_addr, port_num])


def rdp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the rdp output file path #
    rdp_path = paths[1] / 'rdp_out.txt'
    # Execute service handler for rdp #
    service_handler(config, re_obj, log_tuple, config.rdp, config.rdp_custom, rdp_path,
                    [ip_addr, port_num])


def adb_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the adb output file path #
    adb_path = paths[1] / 'adb_out.txt'
    # Execute service handler for adb #
    service_handler(config, re_obj, log_tuple, config.adb, config.adb_custom, adb_path,
                    [ip_addr, port_num])


def vnc_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the vnc output file path #
    vnc_path = paths[1] / 'vnc_out.txt'
    # Execute service handler for vnc #
    service_handler(config, re_obj, log_tuple, config.vnc, config.vnc_custom, vnc_path,
                    [ip_addr, port_num])


def winrm_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                  log_tuple: tuple):
    # Set the winrm output file path #
    winrm_path = paths[1] / 'winrm_out.txt'
    # Execute service handler for winrm #
    service_handler(config, re_obj, log_tuple, config.winrm, config.winrm_custom, winrm_path,
                    [ip_addr, port_num])


def ad_admin_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                     log_tuple: tuple):
    # Set the ad admin output file path #
    ad_admin_path = paths[1] / 'ad_admin_out.txt'
    # Execute service handler for ad admin #
    service_handler(config, re_obj, log_tuple, config.adac, config.adac_custom, ad_admin_path,
                    [ip_addr, port_num])
