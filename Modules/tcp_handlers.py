""" Custom modules """
from Modules.utils import service_handler


def ftp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the ftp output file path #
    ftp_path = paths[1] / 'ftp_out.txt'
    # Execute service handler for ftp #
    service_handler(config, re_obj, log_tuple, config.ftp, config.ftp_custom, ftp_path,
                    [ip_addr, port_num])


def ssh_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the ssh output file path #
    ssh_path = paths[1] / 'ssh_out.txt'
    # Execute service handler for ssh #
    service_handler(config, re_obj, log_tuple, config.ssh, config.ssh_custom, ssh_path,
                    [ip_addr, port_num])


def telnet_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                   log_tuple: tuple):
    # Set the telnet output file path #
    telnet_path = paths[1] / 'telnet_out.txt'
    # Execute service handler for telnet #
    service_handler(config, re_obj, log_tuple, config.telnet, config.telnet_custom, telnet_path,
                    [ip_addr, port_num])


def smtp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the smtp output file path #
    smtp_path = paths[1] / 'smtp_out.txt'
    # Execute service handler for telnet #
    service_handler(config, re_obj, log_tuple, config.smtp, config.smtp_custom, smtp_path,
                    [ip_addr, port_num])


def whois_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                  log_tuple: tuple):
    # Set the whois output file path #
    whois_path = paths[1] / 'whois_out.txt'
    # Execute service handler for whois #
    service_handler(config, re_obj, log_tuple, config.whois, config.whois_custom, whois_path,
                    [ip_addr, port_num])


def finger_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                   log_tuple: tuple):
    # Set the finger output file path #
    finger_path = paths[1] / 'finger_out.txt'
    # Execute service handler for finger #
    service_handler(config, re_obj, log_tuple, config.finger, config.finger_custom, finger_path,
                    [ip_addr, port_num])


def web_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the web output file path #
    web_path = paths[1] / 'web_out.txt'

    # If the port is a http port #
    if port_num in (80, 8080):
        proto = 'http'
    # If the port is a https port #
    else:
        proto = 'https'

    # Execute service handler for web #
    service_handler(config, re_obj, log_tuple, config.web, config.web_custom, web_path,
                    [ip_addr, port_num, proto])


def pop3_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the pop3 output file path #
    pop3_path = paths[1] / 'pop3_out.txt'
    # Execute service handler for pop3 #
    service_handler(config, re_obj, log_tuple, config.pop3, config.pop3_custom, pop3_path,
                    [ip_addr, port_num])


def ident_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                  log_tuple: tuple):
    # Set the ident output file path #
    ident_path = paths[1] / 'ident_out.txt'
    # Execute service handler for ident #
    service_handler(config, re_obj, log_tuple, config.ident, config.ident_custom, ident_path,
                    [ip_addr, port_num])


def nntp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the nntp output file path #
    nntp_path = paths[1] / 'nntp_out.txt'
    # Execute service handler for nntp #
    service_handler(config, re_obj, log_tuple, config.nntp, config.nntp_custom, nntp_path,
                    [ip_addr, port_num])


def imap_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the imap output file path #
    imap_path = paths[1] / 'imap_out.txt'
    # Execute service handler for imap #
    service_handler(config, re_obj, log_tuple, config.imap, config.imap_custom, imap_path,
                    [ip_addr, port_num])


def smux_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the smux output file path #
    smux_path = paths[1] / 'smux_out.txt'
    # Execute service handler for smux #
    service_handler(config, re_obj, log_tuple, config.smux, config.smux_custom, smux_path,
                    [ip_addr, port_num])


def checkpoint_firewall_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                                re_obj: object, log_tuple: tuple):
    # Set the checkpoint firewall output file path #
    checkpoint_firewall_path = paths[1] / 'checkpoint_firewall_out.txt'
    # Execute service handler for checkpoint firewall #
    service_handler(config, re_obj, log_tuple, config.checkpoint_firewall,
                    config.checkpoint_firewall_custom, checkpoint_firewall_path,
                    [ip_addr, port_num])


def smb_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the smb output file path #
    smb_path = paths[1] / 'smb_out.txt'
    # Execute service handler for smb #
    service_handler(config, re_obj, log_tuple, config.smb, config.smb_custom, smb_path,
                    [ip_addr, port_num])


def modbus_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                   log_tuple: tuple):
    # Set the modbus output file path #
    modbus_path = paths[1] / 'modbus_out.txt'
    # Execute service handler for modbus #
    service_handler(config, re_obj, log_tuple, config.modbus, config.modbus_custom, modbus_path,
                    [ip_addr, port_num])


def rexec_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                  log_tuple: tuple):
    # Set the rexec output file path #
    rexec_path = paths[1] / 'rexec_out.txt'
    # Execute service handler function #
    service_handler(config, re_obj, log_tuple, config.rexec, config.rexec_custom, rexec_path,
                    [ip_addr, port_num])


def rlogin_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                   log_tuple: tuple):
    # Set the rlogin output file path #
    rlogin_path = paths[1] / 'rlogin_out.txt'
    # Execute service handler for rlogin #
    service_handler(config, re_obj, log_tuple, config.rlogin, config.rlogin_custom, rlogin_path,
                    [ip_addr, port_num])


def rsh_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the rsh output file path #
    rsh_path = paths[1] / 'rsh_out.txt'
    # Execute service handler for rsh #
    service_handler(config, re_obj, log_tuple, config.rsh, config.rsh_custom, rsh_path,
                    [ip_addr, port_num])


def lpd_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the lpd output file path #
    lpd_path = paths[1] / 'lpd_out.txt'
    # Execute service handler for lpd #
    service_handler(config, re_obj, log_tuple, config.lpd, config.lpd_custom, lpd_path,
                    [ip_addr, port_num])


def apple_filing_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                         log_tuple: tuple):
    # Set the apple filing output file path #
    apple_filing_path = paths[1] / 'apple_filing.txt'
    # Execute service handler for apple filing #
    service_handler(config, re_obj, log_tuple, config.apple_filing, config.apple_filing_custom,
                    apple_filing_path, [ip_addr, port_num])


def rtsp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the rtsp output file path #
    rtsp_path = paths[1] / 'rtsp_out.txt'
    # Execute service handler for rtsp #
    service_handler(config, re_obj, log_tuple, config.rtsp, config.rtsp_custom, rtsp_path,
                    [ip_addr, port_num])


def cups_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the cups output file path #
    cups_path = paths[1] / 'cups_out.txt'
    # Execute service handler for cups #
    service_handler(config, re_obj, log_tuple, config.cups, config.cups_custom, cups_path,
                    [ip_addr, port_num])


def kerbv5_admin_tcp_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                             re_obj: object, log_tuple: tuple):
    # Set the kerberos v5 admin tcp output file path #
    kerbv5_admin_tcp_path = paths[1] / 'kerbv5_admin_tcp_out.txt'
    # Execute service handler for kerberos V5 admin tcp #
    service_handler(config, re_obj, log_tuple, config.kerberos_v5_admin_tcp,
                    config.kerberos_v5_admin_tcp_custom, kerbv5_admin_tcp_path, [ip_addr, port_num])


def kerbv4_passwd_tcp_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                              re_obj: object, log_tuple: tuple):
    # Set the kerberos v5 passwd tcp output file path #
    kerbv4_passwd_tcp_path = paths[1] / 'kerbv4_passwd_tcp_out.txt'
    # Execute service handler for kerberos V4 passwd tcp #
    service_handler(config, re_obj, log_tuple, config.kerberos_v4_passwd_tcp,
                    config.kerberos_v4_passwd_tcp_custom, kerbv4_passwd_tcp_path,
                    [ip_addr, port_num])


def rsync_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                  re_obj: object, log_tuple: tuple):
    # Set the rsync output file path #
    rsync_path = paths[1] / 'rsync_out.txt'
    # Execute service handler for rsync #
    service_handler(config, re_obj, log_tuple, config.rsync, config.rsync_custom, rsync_path,
                    [ip_addr, port_num])


def iis_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the iis output file path #
    iis_path = paths[1] / 'iis_out.txt'
    # Execute service handler for iis #
    service_handler(config, re_obj, log_tuple, config.iis, config.iis_custom, iis_path,
                    [ip_addr, port_num])


def java_rmi_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                     log_tuple: tuple):
    # Set the java rmi output file path #
    java_rmi_path = paths[1] / 'java_rmi.txt'
    # Execute service handler for java rmi #
    service_handler(config, re_obj, log_tuple, config.java_rmi, config.java_rmi_custom,
                    java_rmi_path, [ip_addr, port_num])


def mssql_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                  log_tuple: tuple):
    # Set the mssql output file path #
    mssql_path = paths[1] / 'mssql_out.txt'
    # Execute service handler for mssql #
    service_handler(config, re_obj, log_tuple, config.mssql, config.mssql_custom, mssql_path,
                    [ip_addr, port_num])


def oracle_db_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                      log_tuple: tuple):
    # Set the oracle db output file path #
    oracle_db_path = paths[1] / 'oracle_db_out.txt'
    # Execute service handler for oracle db #
    service_handler(config, re_obj, log_tuple, config.oracle_db, config.oracle_db_custom,
                    oracle_db_path, [ip_addr, port_num])


def pptp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the pptp output file path #
    pptp_path = paths[1] / 'pptp_out.txt'
    # Execute service handler for pptp #
    service_handler(config, re_obj, log_tuple, config.pptp, config.pptp_custom, pptp_path,
                    [ip_addr, port_num])


def mosquito_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                     log_tuple: tuple):
    # Set the mosquito output file path #
    mosquito_path = paths[1] / 'mosquito_out.txt'
    # Execute service handler for mosquito #
    service_handler(config, re_obj, log_tuple, config.mosquito, config.mosquito_custom,
                    mosquito_path, [ip_addr, port_num])


def oracle_xmldb_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                         log_tuple: tuple):
    # Set the oracle xml db output file path #
    oracle_xmldb_path = paths[1] / 'oracle_xmldb_out.txt'
    # Execute service handler for oracle xmldb #
    service_handler(config, re_obj, log_tuple, config.oracle_xml_db, config.oracle_xml_db_custom,
                    oracle_xmldb_path, [ip_addr, port_num])


def insight_manager_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                            re_obj: object, log_tuple: tuple):
    # Set the insight manager output file path #
    insight_manager_path = paths[1] / 'insight_manager_out.txt'
    # Execute service handler for insight manager #
    service_handler(config, re_obj, log_tuple, config.insight_manager,
                    config.insight_manager_custom, insight_manager_path, [ip_addr, port_num])


def docker_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                   log_tuple: tuple):
    # Set the docker output file path #
    docker_path = paths[1] / 'docker_out.txt'
    # Execute service handler for docker #
    service_handler(config, re_obj, log_tuple, config.docker, config.docker_custom, docker_path,
                    [ip_addr, port_num])


def squid_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                  log_tuple: tuple):
    # Set the squid output file path #
    squid_path = paths[1] / 'squid_out.txt'
    # Execute service handler for squid #
    service_handler(config, re_obj, log_tuple, config.squid, config.squid_custom, squid_path,
                    [ip_addr, port_num])


def iscsi_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                  log_tuple: tuple):
    # Set the iscsi output file path #
    iscsi_path = paths[1] / 'iscsi_out.txt'
    # Execute service handler for iscsi #
    service_handler(config, re_obj, log_tuple, config.iscsi, config.iscsi_custom, iscsi_path,
                    [ip_addr, port_num])


def sap_router_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                       log_tuple: tuple):
    # Set the sap router output file path #
    sap_router_path = paths[1] / 'sap_router_out.txt'
    # Execute service handler for sap router #
    service_handler(config, re_obj, log_tuple, config.sap_router, config.sap_router_custom,
                    sap_router_path, [ip_addr, port_num])


def sql_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the sql output file path #
    sql_path = paths[1] / 'sql_out.txt'
    # Execute service handler for mysql #
    service_handler(config, re_obj, log_tuple, config.sql, config.sql_custom, sql_path,
                    [ip_addr, port_num])


def oracle_web_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                       log_tuple: tuple):
    # Set the oracle web output file path #
    oracle_web_path = paths[1] / 'oracle_web_out.txt'
    # Execute service handler for oracle web #
    service_handler(config, re_obj, log_tuple, config.oracle_web, config.oracle_web_custom,
                    oracle_web_path, [ip_addr, port_num])


def rdp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the rdp output file path #
    rdp_path = paths[1] / 'rdp_out.txt'
    # Execute service handler for rdp #
    service_handler(config, re_obj, log_tuple, config.rdp, config.rdp_custom, rdp_path,
                    [ip_addr, port_num])


def distcc_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                   log_tuple: tuple):
    # Set the distcc output file path #
    distcc_path = paths[1] / 'distcc_out.txt'
    # Execute service handler for distcc #
    service_handler(config, re_obj, log_tuple, config.distcc, config.distcc_custom, distcc_path,
                    [ip_addr, port_num])


def subversion_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                       log_tuple: tuple):
    # Set the subversion output file path #
    subversion_path = paths[1] / 'subversion_out.txt'
    # Execute service handler for subversion #
    service_handler(config, re_obj, log_tuple, config.subversion, config.subversion_custom,
                    subversion_path, [ip_addr, port_num])


def epmd_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the epmd output file path #
    epmd_path = paths[1] / 'epmd_out.txt'
    # Execute service handler for epmd #
    service_handler(config, re_obj, log_tuple, config.epmd, config.epmd_custom, epmd_path,
                    [ip_addr, port_num])


def cisco_smart_install_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                                re_obj: object, log_tuple: tuple):
    # Set the cisco smart install output file path #
    cisco_smart_install_path = paths[1] / 'cisco_smart_install_out.txt'
    # Execute service handler for cisco smart install #
    service_handler(config, re_obj, log_tuple, config.cisco_smart_install,
                    config.cisco_smart_install_custom, cisco_smart_install_path,
                    [ip_addr, port_num])


def docker_registry_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                            re_obj: object, log_tuple: tuple):
    # Set the docker registry output file path #
    docker_registry_path = paths[1] / 'docker_registry_out.txt'
    # Execute service handler for docker registry #
    service_handler(config, re_obj, log_tuple, config.docker_registry,
                    config.docker_registry_custom, docker_registry_path, [ip_addr, port_num])


def adb_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the adb output file path #
    adb_path = paths[1] / 'adb_out.txt'
    # Execute service handler for adb #
    service_handler(config, re_obj, log_tuple, config.adb, config.adb_custom, adb_path,
                    [ip_addr, port_num])


def postgresql_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                       log_tuple: tuple):
    # Set the postgresql output file handler #
    postgresql_path = paths[1] / 'postgresql_out.txt'
    # Execute service handler for postgresql #
    service_handler(config, re_obj, log_tuple, config.postgresql, config.postgresql_custom,
                    postgresql_path, [ip_addr, port_num])


def redshift_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                     log_tuple: tuple):
    # Set the redshift output file path #
    redshift_path = paths[1] / 'redshift_out.txt'
    # Execute service handler for redshift #
    service_handler(config, re_obj, log_tuple, config.redshift, config.redshift_custom,
                    redshift_path, [ip_addr, port_num])


def vnc_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the vnc output file path #
    vnc_path = paths[1] / 'vnc_out.txt'
    # Execute service handler for vnc #
    service_handler(config, re_obj, log_tuple, config.vnc, config.vnc_custom, vnc_path,
                    [ip_addr, port_num])


def winrm_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                  log_tuple: tuple):
    # Set the winrm output file path #
    winrm_path = paths[1] / 'winrm_out.txt'
    # Execute service handler for winrm #
    service_handler(config, re_obj, log_tuple, config.winrm, config.winrm_custom, winrm_path,
                    [ip_addr, port_num])


def x11_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the x11 output file path #
    x11_path = paths[1] / 'x11_out.txt'
    # Execute service handler for x11 #
    service_handler(config, re_obj, log_tuple, config.x11, config.x11_custom, x11_path,
                    [ip_addr, port_num])


def redis_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                  log_tuple: tuple):
    # Sete the redis output file path #
    redis_path = paths[1] / 'redis_out.txt'
    # Execute service handler for redis #
    service_handler(config, re_obj, log_tuple, config.redis, config.redis_custom, redis_path,
                    [ip_addr, port_num])


def apache_jserv_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                         log_tuple: tuple):
    # Set the apache jserv output file path #
    apache_jserv_path = paths[1] / 'apache_jserv_out.txt'
    # Execute service handler for apache jserv #
    service_handler(config, re_obj, log_tuple, config.apache_jserv, config.apache_jserv_custom,
                    apache_jserv_path, [ip_addr, port_num])


def influxdb_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                     log_tuple: tuple):
    # Set the influxdb output file path #
    influxdb_path = paths[1] / 'influxdb_out.txt'
    # Execute service handler for influxdb #
    service_handler(config, re_obj, log_tuple, config.influxdb, config.influxdb_custom,
                    influxdb_path, [ip_addr, port_num])


def splunkd_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                    log_tuple: tuple):
    # Set the splunkd output file path #
    splunkd_path = paths[1] / 'splunkd_out.txt'
    # Execute service handler for splunkd #
    service_handler(config, re_obj, log_tuple, config.splunkd, config.splunkd_custom, splunkd_path,
                    [ip_addr, port_num])


def bitcoin_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                    log_tuple: tuple):
    # Set the bitcoin output file path #
    bitcoin_path = paths[1] / 'bitcoin_out.txt'
    # Execute service handler for bitcoin #
    service_handler(config, re_obj, log_tuple, config.bitcoin, config.bitcoin_custom, bitcoin_path,
                    [ip_addr, port_num])


def hypersql_db_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                        log_tuple: tuple):
    # Set the hypersql db output file path #
    hypersql_db_path = paths[1] / 'hypersql_db_out.txt'
    # Execute service handler for hypersql db #
    service_handler(config, re_obj, log_tuple, config.hypersql_db, config.hypersql_db_custom,
                    hypersql_db_path, [ip_addr, port_num])


def apache_casandra_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                            re_obj: object, log_tuple: tuple):
    # Set the apache casandra output file path #
    apache_casandra_path = paths[1] / 'apache_casandra_out.txt'
    # Execute service handler for apache casandra #
    service_handler(config, re_obj, log_tuple, config.apache_casandra,
                    config.apache_casandra_custom, apache_casandra_path, [ip_addr, port_num])


def raw_printing_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                         log_tuple: tuple):
    # Set the raw printing output file path #
    raw_printing_path = paths[1] / 'raw_printing_out.txt'
    # Execute service handler for raw printing #
    service_handler(config, re_obj, log_tuple, config.raw_printing, config.raw_printing_custom,
                    raw_printing_path, [ip_addr, port_num])


def elastic_search_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                           re_obj: object, log_tuple: tuple):
    # Set the elastic search output file path #
    elastic_search_path = paths[1] / 'elastic_search_out.txt'
    # Execute service handler for elastic search #
    service_handler(config, re_obj, log_tuple, config.elastic_search, config.elastic_search_custom,
                    elastic_search_path, [ip_addr, port_num])


def ad_admin_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                     log_tuple: tuple):
    # Set the ad admin output file path #
    ad_admin_path = paths[1] / 'ad_admin_out.txt'
    # Execute service handler for ad admin #
    service_handler(config, re_obj, log_tuple, config.adac, config.adac_custom, ad_admin_path,
                    [ip_addr, port_num])


def ndmp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the ndmp output file path #
    ndmp_path = paths[1] / 'ndmp_out.txt'
    # Execute service handler for ndmp #
    service_handler(config, re_obj, log_tuple, config.ndmp, config.ndmp_custom, ndmp_path,
                    [ip_addr, port_num])


def memcache_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                     log_tuple: tuple):
    # Set the memcache output file path #
    memcache_path = paths[1] / 'memcache_out.txt'
    # Execute service handler for memcache #
    service_handler(config, re_obj, log_tuple, config.memcache, config.memcache_custom,
                    memcache_path, [ip_addr, port_num])


def rabbit_mq_management_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                                 re_obj: object, log_tuple: tuple):
    # Set the rabbit mq management output file path #
    rabbit_mq_management_path = paths[1] / 'rabbit_mq_management_out.txt'
    # Execute the service handler for rabbit mq management #
    service_handler(config, re_obj, log_tuple, config.rabbit_mq_management,
                    config.rabbit_mq_management_custom, rabbit_mq_management_path,
                    [ip_addr, port_num])


def gluster_fs_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                       log_tuple: tuple):
    # Set the gluster fs output file path #
    gluster_fs_path = paths[1] / 'gluster_fs_out.txt'
    # Execute service handler for gluster fs #
    service_handler(config, re_obj, log_tuple, config.gluster_fs, config.gluster_fs_custom,
                    gluster_fs_path, [ip_addr, port_num])


def mongo_db_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                     log_tuple: tuple):
    # Set the mongo db output file path #
    mongo_db_path = paths[1] / 'mongo_db_out.txt'
    # Execute service handler for mongo db #
    service_handler(config, re_obj, log_tuple, config.mongo_db, config.mongo_db_custom,
                    mongo_db_path, [ip_addr, port_num])


def tiller_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                   log_tuple: tuple):
    # Set the tiller output file path #
    tiller_path = paths[1] / 'tiller_out.txt'
    # Execute service handler for tiller #
    service_handler(config, re_obj, log_tuple, config.tiller, config.tiller_custom, tiller_path,
                    [ip_addr, port_num])


def jenkins_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                    log_tuple: tuple):
    # Set the jenkins output file path #
    jenkins_path = paths[1] / 'jenkins_out.txt'
    # Execute service handler for jenkins #
    service_handler(config, re_obj, log_tuple, config.jenkins, config.jenkins_custom, jenkins_path,
                    [ip_addr, port_num])
