""" Custom modules """
from Modules.utils import service_handler


async def ftp_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the ftp output file path #
    ftp_path = paths[0] / 'ftp_out.txt'
    # Execute service handler for ftp #
    await service_handler(config, re_obj, config.ftp, config.ftp_custom, ftp_path, arg_list)


async def ssh_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the ssh output file path #
    ssh_path = paths[0] / 'ssh_out.txt'
    # Execute service handler for ssh #
    await service_handler(config, re_obj, config.ssh, config.ssh_custom, ssh_path, arg_list)


async def telnet_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the telnet output file path #
    telnet_path = paths[0] / 'telnet_out.txt'
    # Execute service handler for telnet #
    await service_handler(config, re_obj, config.telnet, config.telnet_custom,
                          telnet_path, arg_list)


async def smtp_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the smtp output file path #
    smtp_path = paths[0] / 'smtp_out.txt'
    # Execute service handler for telnet #
    await service_handler(config, re_obj, config.smtp, config.smtp_custom, smtp_path, arg_list)


async def whois_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the whois output file path #
    whois_path = paths[0] / 'whois_out.txt'
    # Execute service handler for whois #
    await service_handler(config, re_obj, config.whois, config.whois_custom, whois_path, arg_list)


async def finger_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the finger output file path #
    finger_path = paths[0] / 'finger_out.txt'
    # Execute service handler for finger #
    await service_handler(config, re_obj, config.finger, config.finger_custom,
                          finger_path, arg_list)


async def web_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the web output file path #
    web_path = paths[0] / 'web_out.txt'

    # If the port is a http port #
    if arg_list[2] in (80, 8080):
        proto = 'http'
    # If the port is a https port #
    else:
        proto = 'https'

    # Append proto to arg list #
    arg_list.append(proto)

    # Execute service handler for web #
    await service_handler(config, re_obj, config.web, config.web_custom, web_path, arg_list)


async def pop3_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the pop3 output file path #
    pop3_path = paths[0] / 'pop3_out.txt'
    # Execute service handler for pop3 #
    await service_handler(config, re_obj, config.pop3, config.pop3_custom, pop3_path, arg_list)


async def ident_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the ident output file path #
    ident_path = paths[0] / 'ident_out.txt'
    # Execute service handler for ident #
    await service_handler(config, re_obj, config.ident, config.ident_custom, ident_path, arg_list)


async def nntp_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the nntp output file path #
    nntp_path = paths[0] / 'nntp_out.txt'
    # Execute service handler for nntp #
    await service_handler(config, re_obj, config.nntp, config.nntp_custom, nntp_path, arg_list)


async def imap_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the imap output file path #
    imap_path = paths[0] / 'imap_out.txt'
    # Execute service handler for imap #
    await service_handler(config, re_obj, config.imap, config.imap_custom, imap_path, arg_list)


async def smux_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the smux output file path #
    smux_path = paths[0] / 'smux_out.txt'
    # Execute service handler for smux #
    await service_handler(config, re_obj, config.smux, config.smux_custom, smux_path, arg_list)


async def checkpoint_firewall_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the checkpoint firewall output file path #
    checkpoint_firewall_path = paths[0] / 'checkpoint_firewall_out.txt'
    # Execute service handler for checkpoint firewall #
    await service_handler(config, re_obj, config.checkpoint_firewall,
                          config.checkpoint_firewall_custom, checkpoint_firewall_path, arg_list)


async def smb_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the smb output file path #
    smb_path = paths[0] / 'smb_out.txt'
    # Execute service handler for smb #
    await service_handler(config, re_obj, config.smb, config.smb_custom, smb_path, arg_list)


async def modbus_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the modbus output file path #
    modbus_path = paths[0] / 'modbus_out.txt'
    # Execute service handler for modbus #
    await service_handler(config, re_obj, config.modbus, config.modbus_custom,
                          modbus_path, arg_list)


async def rexec_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the rexec output file path #
    rexec_path = paths[0] / 'rexec_out.txt'
    # Execute service handler function #
    await service_handler(config, re_obj, config.rexec, config.rexec_custom, rexec_path, arg_list)


async def rlogin_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the rlogin output file path #
    rlogin_path = paths[0] / 'rlogin_out.txt'
    # Execute service handler for rlogin #
    await service_handler(config, re_obj, config.rlogin, config.rlogin_custom,
                          rlogin_path, arg_list)


async def rsh_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the rsh output file path #
    rsh_path = paths[0] / 'rsh_out.txt'
    # Execute service handler for rsh #
    await service_handler(config, re_obj, config.rsh, config.rsh_custom, rsh_path, arg_list)


async def apple_filing_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the apple filing output file path #
    apple_filing_path = paths[0] / 'apple_filing.txt'
    # Execute service handler for apple filing #
    await service_handler(config, re_obj, config.apple_filing, config.apple_filing_custom,
                          apple_filing_path, arg_list)


async def rtsp_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the rtsp output file path #
    rtsp_path = paths[0] / 'rtsp_out.txt'
    # Execute service handler for rtsp #
    await service_handler(config, re_obj, config.rtsp, config.rtsp_custom, rtsp_path, arg_list)


async def cups_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the cups output file path #
    cups_path = paths[0] / 'cups_out.txt'
    # Execute service handler for cups #
    await service_handler(config, re_obj, config.cups, config.cups_custom, cups_path, arg_list)


async def rsync_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the rsync output file path #
    rsync_path = paths[0] / 'rsync_out.txt'
    # Execute service handler for rsync #
    await service_handler(config, re_obj, config.rsync, config.rsync_custom, rsync_path, arg_list)


async def java_rmi_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the java rmi output file path #
    java_rmi_path = paths[0] / 'java_rmi.txt'
    # Execute service handler for java rmi #
    await service_handler(config, re_obj, config.java_rmi, config.java_rmi_custom,
                          java_rmi_path, arg_list)


async def mssql_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the mssql output file path #
    mssql_path = paths[0] / 'mssql_out.txt'
    # Execute service handler for mssql #
    await service_handler(config, re_obj, config.mssql, config.mssql_custom, mssql_path, arg_list)


async def oracle_db_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the oracle db output file path #
    oracle_db_path = paths[0] / 'oracle_db_out.txt'
    # Execute service handler for oracle db #
    await service_handler(config, re_obj, config.oracle_db, config.oracle_db_custom,
                          oracle_db_path, arg_list)


async def oracle_xmldb_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the oracle xml db output file path #
    oracle_xmldb_path = paths[0] / 'oracle_xmldb_out.txt'
    # Execute service handler for oracle xmldb #
    await service_handler(config, re_obj, config.oracle_xml_db, config.oracle_xml_db_custom,
                          oracle_xmldb_path, arg_list)


async def docker_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the docker output file path #
    docker_path = paths[0] / 'docker_out.txt'
    # Execute service handler for docker #
    await service_handler(config, re_obj, config.docker, config.docker_custom,
                          docker_path, arg_list)


async def squid_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the squid output file path #
    squid_path = paths[0] / 'squid_out.txt'
    # Execute service handler for squid #
    await service_handler(config, re_obj, config.squid, config.squid_custom, squid_path, arg_list)


async def iscsi_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the iscsi output file path #
    iscsi_path = paths[0] / 'iscsi_out.txt'
    # Execute service handler for iscsi #
    await service_handler(config, re_obj, config.iscsi, config.iscsi_custom, iscsi_path, arg_list)


async def sap_router_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the sap router output file path #
    sap_router_path = paths[0] / 'sap_router_out.txt'
    # Execute service handler for sap router #
    await service_handler(config, re_obj, config.sap_router, config.sap_router_custom,
                          sap_router_path, arg_list)


async def sql_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the sql output file path #
    sql_path = paths[0] / 'sql_out.txt'
    # Execute service handler for mysql #
    await service_handler(config, re_obj, config.sql, config.sql_custom, sql_path, arg_list)


async def rdp_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the rdp output file path #
    rdp_path = paths[0] / 'rdp_out.txt'
    # Execute service handler for rdp #
    await service_handler(config, re_obj, config.rdp, config.rdp_custom, rdp_path, arg_list)


async def distcc_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the distcc output file path #
    distcc_path = paths[0] / 'distcc_out.txt'
    # Execute service handler for distcc #
    await service_handler(config, re_obj, config.distcc, config.distcc_custom,
                          distcc_path, arg_list)


async def subversion_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the subversion output file path #
    subversion_path = paths[0] / 'subversion_out.txt'
    # Execute service handler for subversion #
    await service_handler(config, re_obj, config.subversion, config.subversion_custom,
                          subversion_path, arg_list)


async def epmd_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the epmd output file path #
    epmd_path = paths[0] / 'epmd_out.txt'
    # Execute service handler for epmd #
    await service_handler(config, re_obj, config.epmd, config.epmd_custom, epmd_path, arg_list)


async def cisco_smart_install_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the cisco smart install output file path #
    cisco_smart_install_path = paths[0] / 'cisco_smart_install_out.txt'
    # Execute service handler for cisco smart install #
    await service_handler(config, re_obj, config.cisco_smart_install,
                          config.cisco_smart_install_custom, cisco_smart_install_path, arg_list)


async def postgresql_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the postgresql output file handler #
    postgresql_path = paths[0] / 'postgresql_out.txt'
    # Execute service handler for postgresql #
    await service_handler(config, re_obj, config.postgresql, config.postgresql_custom,
                          postgresql_path, arg_list)


async def redshift_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the redshift output file path #
    redshift_path = paths[0] / 'redshift_out.txt'
    # Execute service handler for redshift #
    await service_handler(config, re_obj, config.redshift, config.redshift_custom,
                          redshift_path, arg_list)


async def vnc_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the vnc output file path #
    vnc_path = paths[0] / 'vnc_out.txt'
    # Execute service handler for vnc #
    await service_handler(config, re_obj, config.vnc, config.vnc_custom, vnc_path, arg_list)


async def winrm_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the winrm output file path #
    winrm_path = paths[0] / 'winrm_out.txt'
    # Execute service handler for winrm #
    await service_handler(config, re_obj, config.winrm, config.winrm_custom, winrm_path, arg_list)


async def x11_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the x11 output file path #
    x11_path = paths[0] / 'x11_out.txt'
    # Execute service handler for x11 #
    await service_handler(config, re_obj, config.x11, config.x11_custom, x11_path, arg_list)


async def redis_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the redis output file path #
    redis_path = paths[0] / 'redis_out.txt'
    # Execute service handler for redis #
    await service_handler(config, re_obj, config.redis, config.redis_custom, redis_path, arg_list)


async def java_debug_wire(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the java debug wire file path #
    java_debug_wire_path = paths[0] / 'java_debug_wire_out.txt'
    # Execute service handler for java debug wire #
    await service_handler(config, re_obj, config.java_debug_wire, config.java_debug_wire_custom,
                          java_debug_wire_path, arg_list)


async def apache_jserv_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the apache jserv output file path #
    apache_jserv_path = paths[0] / 'apache_jserv_out.txt'
    # Execute service handler for apache jserv #
    await service_handler(config, re_obj, config.apache_jserv, config.apache_jserv_custom,
                          apache_jserv_path, arg_list)


async def influxdb_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the influxdb output file path #
    influxdb_path = paths[0] / 'influxdb_out.txt'
    # Execute service handler for influxdb #
    await service_handler(config, re_obj, config.influxdb, config.influxdb_custom,
                          influxdb_path, arg_list)


async def bitcoin_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the bitcoin output file path #
    bitcoin_path = paths[0] / 'bitcoin_out.txt'
    # Execute service handler for bitcoin #
    await service_handler(config, re_obj, config.bitcoin, config.bitcoin_custom,
                          bitcoin_path, arg_list)


async def apache_casandra_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the apache casandra output file path #
    apache_casandra_path = paths[0] / 'apache_casandra_out.txt'
    # Execute service handler for apache casandra #
    await service_handler(config, re_obj, config.apache_casandra, config.apache_casandra_custom,
                          apache_casandra_path, arg_list)


async def raw_printing_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the raw printing output file path #
    raw_printing_path = paths[0] / 'raw_printing_out.txt'
    # Execute service handler for raw printing #
    await service_handler(config, re_obj, config.raw_printing, config.raw_printing_custom,
                          raw_printing_path, arg_list)


async def elastic_search_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the elastic search output file path #
    elastic_search_path = paths[0] / 'elastic_search_out.txt'
    # Execute service handler for elastic search #
    await service_handler(config, re_obj, config.elastic_search, config.elastic_search_custom,
                          elastic_search_path, arg_list)


async def ndmp_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the ndmp output file path #
    ndmp_path = paths[0] / 'ndmp_out.txt'
    # Execute service handler for ndmp #
    await service_handler(config, re_obj, config.ndmp, config.ndmp_custom, ndmp_path, arg_list)


async def memcache_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the memcache output file path #
    memcache_path = paths[0] / 'memcache_out.txt'
    # Execute service handler for memcache #
    await service_handler(config, re_obj, config.memcache, config.memcache_custom,
                          memcache_path, arg_list)


async def gluster_fs_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the gluster fs output file path #
    gluster_fs_path = paths[0] / 'gluster_fs_out.txt'
    # Execute service handler for gluster fs #
    await service_handler(config, re_obj, config.gluster_fs, config.gluster_fs_custom,
                          gluster_fs_path, arg_list)


async def mongo_db_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the mongo db output file path #
    mongo_db_path = paths[0] / 'mongo_db_out.txt'
    # Execute service handler for mongo db #
    await service_handler(config, re_obj, config.mongo_db, config.mongo_db_custom,
                          mongo_db_path, arg_list)


async def hadoop_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the hadoop output file path #
    hadoop_path = paths[0] / 'hadoop_out.txt'
    # Execute service handler for hadoop #
    await service_handler(config, re_obj, config.hadoop, config.hadoop_custom,
                          hadoop_path, arg_list)
