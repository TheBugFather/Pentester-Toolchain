# Built-In Modules #
import logging
import shlex
import sys
from subprocess import Popen, CalledProcessError, SubprocessError, TimeoutExpired

# External Modules #

# Custom Modules #
import Modules.Globals as Globals

"""
################
Function Index #
########################################################################################################################
FileHandler  -  Handlers file read/write operation.
PrintErr  -  Displays the error message through stderr (standard error).
SystemCmd  -  Execute shell-escaped system command.
########################################################################################################################
"""


"""
########################################################################################################################
Name:       FileHandler
Purpose:    Handles file read/write operation.
Parameters: The path to the file, file mode (r, w, a), file operation (read/write), and data if write mode specified.
Returns:    Data on successful read operation, -1 for read errors, -2 for write errors, and -3 for operation/IO errors. 
########################################################################################################################
"""
def FileHandler(file_path: str, mode: str, operation: str, data=None):
    # If read operation #
    if operation == 'read' and mode == 'r':
        # If the file exists, but does not have read access #
        if Globals.FileCheck(file_path) and not Globals.FileHasRead(file_path):
            # Print and log error, then exit #
            PrintErr('File Read - Attempting to read from file that does not have read access, '
                     'make sure the file is closed and has proper permissions')
            logging.exception('File Read - Attempting to read from file that does not have read access, '
                              'make sure the file is closed and has proper permissions\n\n')
            sys.exit(-1)
        # If file does not exist #
        if not Globals.FileCheck(file_path):
            # Print and log error, then exit #
            PrintErr('File Read - Attempting to read from a file that does not exist')
            logging.exception('File Read - Attempting to read from a file that does not exist\n\n')
            sys.exit(-1)

    # If write operation #
    elif operation == 'write' and (mode == 'w' or mode == 'a'):
        # If no data passed in #
        if not data:
            # Print and log error, then exit #
            PrintErr('File Write - Attempting to write to file with no data')
            logging.exception('File Write - Attempting to write to file with no data\n\n')
            sys.exit(-2)
        # If the file exists, but does not have write access #
        if Globals.FileCheck(file_path) and not Globals.FileHasWrite(file_path):
            # Print and log error, then exit #
            PrintErr('File Write - Attempting to write to a file that does not have write access, '
                     'make sure file is closed and has proper permissions')
            logging.exception('File Write - Attempting to write to a file that does not have write access, '
                              'make sure file is closed and has proper permissions\n\n')
            sys.exit(-2)

    # If improper operation was specified #
    else:
        # Print and log error, then exit #
        PrintErr(f'File Operation - {operation} is not valid, read/write are only options')
        logging.exception(f'File Operation - {operation} is not valid, read/write are only options\n\n')
        sys.exit(-3)

    try:
        # Open the file in passed in mode #
        with open(file_path, mode) as file:
            # If read operation
            if operation == 'read':
                return file.read()
            # If write operation #
            else:
                file.write(data)

    # If IO error occurs #
    except (IOError, OSError) as err:
        # Print and log error, then exit #
        PrintErr(f'File IO - {err}')
        logging.exception(f'File IO - {err}\n\n')
        sys.exit(-3)


"""
########################################################################################################################
Name:       PrintErr
Purpose:    Displays the error message through stderr (standard error).
Parameters: The error message to be displayed.
Returns:    Nothing
########################################################################################################################
"""
def PrintErr(msg: str):
    print(f'\n* [ERROR] {msg} *\n', file=sys.stderr)


"""
########################################################################################################################
Name:       SystemCmd
Purpose:    Execute shell-escaped system command.
Parameters: Command to be executed, standard output, standard error, execution timeout.
Returns:    Nothing
########################################################################################################################
"""
def SystemCmd(cmd: str, stdout, stderr, exec_time: int, out_file=None):
    # Shell escape command string #
    exe = shlex.quote(cmd)
    command = None

    try:
        # If the output is to be written to a file #
        if out_file:
            # Create output file in write mode #
            with open(out_file, 'w') as file:
                # TODO use the log file as stderr
                command = Popen(exe, stdout=file, stderr=stderr, shell=False)
                command.communicate(timeout=exec_time)
        else:
            # To execute a regular command #
            command = Popen(exe, stdout=stdout, stderr=stderr, shell=False)
            command.communicate(timeout=exec_time)

    # If file IO error occurs #
    except IOError as err:
        PrintErr(f'File IO - {err}')
        logging.exception(f'File IO - {err}\n\n')
        sys.exit(-4)

    # Handles process timeouts and errors #
    except (SubprocessError, TimeoutExpired, CalledProcessError, OSError, ValueError):
        command.kill()
        command.communicate()
