# Built-In Modules #
import errno
import logging
import shlex
import sys
from subprocess import Popen, CalledProcessError, SubprocessError, TimeoutExpired

# External Modules #

# Custom Modules #
import Modules.Globals as Globals

"""
################
Function Index #
########################################################################################################################
ErrorQuery  -  Looks up the errno message to get the description.
FileHandler  -  Handlers file read/write operation.
PrintErr  -  Displays the error message through stderr (standard error).
SystemCmd  -  Execute shell-escaped system command.
########################################################################################################################
"""


"""
########################################################################################################################
Name:       ErrorQuery
Purpose:    Looks up the errno message to get description.
Parameters: Path to file when error occurred, file mode when error occurred, and error message object.
Returns:    Nothing
########################################################################################################################
"""
def ErrorQuery(err_path: str, err_mode: str, err_obj):
    # If file does not exist #
    if err_obj.errno == errno.ENOENT:
        PrintErr(f'{err_path} does not exist')
        logging.exception(f'{err_path} does not exist\n\n')
        sys.exit(2)

    # If the file does not have read/write access #
    elif err_obj.errno == errno.EPERM:
        PrintErr(f'{err_path} does not have permissions for {err_mode} file mode, if file exists confirm it is closed')
        logging.exception(f'{err_path} does not have permissions for {err_mode} file mode\n\n')
        sys.exit(3)

    # File IO error occurred #
    elif err_obj.errno == errno.EIO:
        PrintErr(f'IO error occurred during {err_mode} mode on {err_path}')
        logging.exception(f'IO error occurred during {err_mode} mode on {err_path}\n\n')
        sys.exit(4)

    # If other unexpected file operation occurs #
    else:
        PrintErr(f'Unexpected file operation occurred accessing {err_path}: {err_obj.errno}')
        logging.exception(f'Unexpected file operation occurred accessing {err_path}: {err_obj.errno}\n\n')
        sys.exit(5)


"""
########################################################################################################################
Name:       FileHandler
Purpose:    Handles file read/write operation.
Parameters: The path to the file, file mode (r, w, a), and data if write mode specified.
Returns:    Data on successful read operation, -1 exit if file does not exist, -2 exit if file does not have \
            read/write permissions, -3 exit for IO error, and -4 for unexpected file error.
########################################################################################################################
"""
def FileHandler(file_path: str, mode: str, data=None):
    try:
        # Open the file in passed in mode #
        with open(file_path, mode) as file:
            # If read operation
            if mode == 'r':
                return file.read()
            # If write operation #
            else:
                file.write(data)

    # If IO error occurs #
    except IOError as err:
        ErrorQuery(file_path, mode, err)


"""
########################################################################################################################
Name:       PrintErr
Purpose:    Displays the error message through stderr (standard error).
Parameters: The error message to be displayed.
Returns:    Nothing
########################################################################################################################
"""
def PrintErr(msg: str):
    print(f'\n* [ERROR] {msg} *\n', file=sys.stderr)


"""
########################################################################################################################
Name:       SystemCmd
Purpose:    Execute shell-escaped system command.
Parameters: Command to be executed, standard output, standard error, execution timeout.
Returns:    Nothing
########################################################################################################################
"""
def SystemCmd(cmd: str, stdout, stderr, exec_time: int, out_file=None):
    # Shell escape command string #
    exe = shlex.quote(cmd)
    command = None

    try:
        # If the output is to be written to a file #
        if out_file:
            # Create output file in write mode #
            with open(out_file, 'w') as file:
                # TODO use the log file as stderr
                command = Popen(exe, stdout=file, stderr=stderr, shell=False)
                command.communicate(timeout=exec_time)
        else:
            # To execute a regular command #
            command = Popen(exe, stdout=stdout, stderr=stderr, shell=False)
            command.communicate(timeout=exec_time)

    # If file IO error occurs #
    except IOError as err:
        PrintErr(f'File IO - {err}')
        logging.exception(f'File IO - {err}\n\n')
        sys.exit(-4)

    # Handles process timeouts and errors #
    except (SubprocessError, TimeoutExpired, CalledProcessError, OSError, ValueError):
        command.kill()
        command.communicate()
