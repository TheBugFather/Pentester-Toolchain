""" Custom modules """
from Modules.utils import service_handler


def wins_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the wins output file path #
    wins_path = paths[3] / 'wins_out.txt'
    # Execute service handler for wins #
    service_handler(config, re_obj, log_tuple, config.wins, config.wins_custom, wins_path,
                    [ip_addr, port_num])


def dns_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the dns output file path #
    dns_path = paths[3] / 'dns_out.txt'
    # Execute service handler for dns #
    service_handler(config, re_obj, log_tuple, config.dns, config.dns_custom, dns_path,
                    [ip_addr, port_num])


def kerbv5_ticket_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                          log_tuple: tuple):
    # Set the kerberos v5 ticket output file path #
    kerbv5_ticket_path = paths[3] / 'kerbv5_ticket_out.txt'
    # Execute service handler for kerberos V5 ticket #
    service_handler(config, re_obj, log_tuple, config.kerberos_v5_ticket,
                    config.kerberos_v5_ticket_custom, kerbv5_ticket_path, [ip_addr, port_num])


def rpc_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the rpc output file path #
    rpc_path = paths[3] / 'rpc_out.txt'
    # Execute service handler for rpcbind #
    service_handler(config, re_obj, log_tuple, config.rpc, config.rpc_custom, rpc_path,
                    [ip_addr, port_num])


def ntp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the ntp output file path #
    ntp_path = paths[3] / 'ntp_out.txt'
    # Execute service handler for ntp #
    service_handler(config, re_obj, log_tuple, config.ntp, config.ntp_custom, ntp_path,
                    [ip_addr, port_num])


def msrpc_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                  log_tuple: tuple):
    # Set the msrpc output file path #
    msrpc_path = paths[3] / 'msrpc_out.txt'
    # Execute service handler for msrpc #
    service_handler(config, re_obj, log_tuple, config.msrpc, config.msrpc_custom, msrpc_path,
                    [ip_addr, port_num])


def netbios_name_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                         log_tuple: tuple):
    # Set the netbios name output file path #
    netbios_name_path = paths[3] /'netbios_name_out.txt'
    # Execute service handler for netbios name #
    service_handler(config, re_obj, log_tuple, config.netbios_name, config.netbios_name_custom,
                    netbios_name_path, [ip_addr, port_num])


def netbios_sesh_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                         log_tuple: tuple):
    # Set the netbios session output file name #
    netbios_sesh_path = paths[3] / 'netbios_sesh_out.txt'
    # Execute service handler for netbios session #
    service_handler(config, re_obj, log_tuple, config.netbios_sesh, config.netbios_sesh_custom,
                    netbios_sesh_path, [ip_addr, port_num])


def snmp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the snmp output file path #
    snmp_path = paths[3] / 'snmp_out.txt'
    # Execute service handler for snmp #
    service_handler(config, re_obj, log_tuple, config.snmp, config.snmp_custom, snmp_path,
                    [ip_addr, port_num])


def irc_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the irc output file path #
    irc_path = paths[3] / 'irc_out.txt'
    # Execute service handler for irc #
    service_handler(config, re_obj, log_tuple, config.irc, config.irc_custom, irc_path,
                    [ip_addr, port_num])

def ldap_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the ldap output file path #
    ldap_path = paths[3] / 'ldap_out.txt'
    # Execute service handler for ldap #
    service_handler(config, re_obj, log_tuple, config.ldap, config.ldap_custom, ldap_path,
                    [ip_addr, port_num])


def kerbv4_ticket_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                          log_tuple: tuple):
    # Set the kerberos v4 ticket output file path #
    kerbv4_ticket_path = paths[3] / 'kerbv4_ticket_out.txt'
    # Execute service handler for kerberos V4 ticket #
    service_handler(config, re_obj, log_tuple, config.kerberos_v4_ticket,
                    config.kerberos_v4_ticket_custom, kerbv4_ticket_path, [ip_addr, port_num])


def kerbv4_admin_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                         log_tuple: tuple):
    # Set the kerberos v4 admin output file path #
    kerbv4_admin_path = paths[3] / 'kerbv4_admin_out.txt'
    # Execute service handler for kerberos V4 admin #
    service_handler(config, re_obj, log_tuple, config.kerberos_v4_admin,
                    config.kerberos_v4_admin_custom, kerbv4_admin_path, [ip_addr, port_num])


def windomain_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                      log_tuple: tuple):
    # Set the winddomain output file path #
    windomain_path = paths[3] / 'windomain_out.txt'
    # Execute service handler for windows domain indicator #
    service_handler(config, re_obj, log_tuple, config.windomain_indicator,
                    config.windomain_indicator_custom, windomain_path, [ip_addr, port_num])


def oracle_agent_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                         log_tuple: tuple):
    # Set the oracle agent output file path #
    oracle_agent_path = paths[3] / 'oracle_agent_out.txt'
    # Execute service handler for oracle agent #
    service_handler(config, re_obj, log_tuple, config.oracle_agent, config.oracle_agent_custom,
                    oracle_agent_path, [ip_addr, port_num])


def nfs_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                log_tuple: tuple):
    # Set the nfs output file path #
    nfs_path = paths[3] / 'nfs_out.txt'
    # Execute service handler for nfs #
    service_handler(config, re_obj, log_tuple, config.nfs, config.nfs_custom, nfs_path,
                    [ip_addr, port_num])


def globalcat_ldap_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                           re_obj: object, log_tuple: tuple):
    # Set the globalcat ldap output file path #
    globalcat_ldap_path = paths[3] / 'globalcat_ldap_out.txt'
    # Execute service handler for globalcat ldap #
    service_handler(config, re_obj, log_tuple, config.globalcat_ldap, config.globalcat_ldap_custom,
                    globalcat_ldap_path, [ip_addr, port_num])


def upnotifyp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                      log_tuple: tuple):
    # Set the upnotifyp file path #
    upnotifyp_path = paths[3] / 'upnotifyp_out.txt'
    # Execute service handler for upnotifyp #
    service_handler(config, re_obj, log_tuple, config.upnotifyp, config.upnotifyp_custom,
                    upnotifyp_path, [ip_addr, port_num])


def rsip_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the rsip output file path #
    rsip_path = paths[3] / 'rsip_out.txt'
    # Execute service handler for rsip #
    service_handler(config, re_obj, log_tuple, config.rsip, config.rsip_custom, rsip_path,
                    [ip_addr, port_num])


def wsdapi_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                   log_tuple: tuple):
    # Set the wsdapi output file path #
    wsdapi_path = paths[3] / 'wsdapi_out.txt'
    # Execute service handler for wsdapi #
    service_handler(config, re_obj, log_tuple, config.wsdapi, config.wsdapi_custom, wsdapi_path,
                    [ip_addr, port_num])


def dfsr_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the dfsr output file path #
    dfsr_path = paths[3] / 'dfsr_out.txt'
    # Execute service handler for dfsr #
    service_handler(config, re_obj, log_tuple, config.dfsr, config.dfsr_custom, dfsr_path,
                    [ip_addr, port_num])


def wrms_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the wrms output file path #
    wrms_path = paths[3] / 'wrms_out.txt'
    # Execute service handler for wrms #
    service_handler(config, re_obj, log_tuple, config.wrms, config.wrms_custom, wrms_path,
                    [ip_addr, port_num])
