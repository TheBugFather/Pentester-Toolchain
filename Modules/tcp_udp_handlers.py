""" Custom modules """
from Modules.utils import service_handler


async def dns_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the dns output file path #
    dns_path = paths[3] / 'dns_out.txt'
    # Execute service handler for dns #
    await service_handler(config, re_obj, config.dns, config.dns_custom, dns_path, arg_list)


async def kerberos_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the kerberos v5 ticket output file path #
    kerberos_path = paths[3] / 'kerberos_out.txt'
    # Execute service handler for kerberos V5 ticket #
    await service_handler(config, re_obj, config.kerberos, config.kerberos_custom,
                          kerberos_path, arg_list)


async def rpc_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the rpc output file path #
    rpc_path = paths[3] / 'rpc_out.txt'
    # Execute service handler for rpcbind #
    await service_handler(config, re_obj, config.rpc, config.rpc_custom, rpc_path, arg_list)


async def ntp_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the ntp output file path #
    ntp_path = paths[3] / 'ntp_out.txt'
    # Execute service handler for ntp #
    await service_handler(config, re_obj, config.ntp, config.ntp_custom, ntp_path, arg_list)


async def msrpc_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the msrpc output file path #
    msrpc_path = paths[3] / 'msrpc_out.txt'
    # Execute service handler for msrpc #
    await service_handler(config, re_obj, config.msrpc, config.msrpc_custom, msrpc_path, arg_list)


async def netbios_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the netbios name output file path #
    netbios_name_path = paths[3] / 'netbios_out.txt'
    # Execute service handler for netbios name #
    await service_handler(config, re_obj, config.netbios, config.netbios_custom,
                          netbios_name_path, arg_list)


async def snmp_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the snmp output file path #
    snmp_path = paths[3] / 'snmp_out.txt'
    # Execute service handler for snmp #
    await service_handler(config, re_obj, config.snmp, config.snmp_custom, snmp_path, arg_list)


async def irc_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the irc output file path #
    irc_path = paths[3] / 'irc_out.txt'
    # Execute service handler for irc #
    await service_handler(config, re_obj, config.irc, config.irc_custom, irc_path, arg_list)


async def ldap_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the ldap output file path #
    ldap_path = paths[3] / 'ldap_out.txt'
    # Execute service handler for ldap #
    await service_handler(config, re_obj, config.ldap, config.ldap_custom, ldap_path, arg_list)


async def ipsec_ike_vpn_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the ipsec ike vpn output file path #
    ipsec_ike_vpn_path = paths[3] / 'ipsec_ike_vpn_out.txt'
    # Execute service handler for ipsec ike vpn #
    await service_handler(config, re_obj, config.ipsec_ike_vpn, config.ipsec_ike_vpn_custom,
                          ipsec_ike_vpn_path, arg_list)


async def ipmi_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the ipmi output file path #
    ipmi_path = paths[3] / 'ipmi_out.txt'
    # Execute service handler for ipmi #
    await service_handler(config, re_obj, config.ipmi, config.ipmi_custom, ipmi_path, arg_list)


async def socks_proxy(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the socks proxy output file path #
    socks_proxy_path = paths[3] / 'socks_proxy_out.txt'
    # Execute service handler for socks proxy #
    await service_handler(config, re_obj, config.socks_proxy, config.socks_proxy_custom,
                          socks_proxy_path, arg_list)


async def nfs_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the nfs output file path #
    nfs_path = paths[3] / 'nfs_out.txt'
    # Execute service handler for nfs #
    await service_handler(config, re_obj, config.nfs, config.nfs_custom, nfs_path, arg_list)


async def rabbit_mq_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the rabbit mq output file path #
    rabbit_mq_path = paths[3] / 'rabbit_mq_out.txt'
    # Execute service handler for rabbit mq #
    await service_handler(config, re_obj, config.rabbit_mq, config.rabbit_mq_custom,
                          rabbit_mq_path, arg_list)


async def couchdb_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the couchdb output file path #
    couchdb_path = paths[3] / 'couchdb_out.txt'
    # Execute service handler for couchdb #
    await service_handler(config, re_obj, config.couchdb, config.couchdb_custom,
                          couchdb_path, arg_list)


async def ethernet_ip_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the ethernet ip output file path #
    ethernet_ip_path = paths[3] / 'ethernet_ip_out.txt'
    # Execute service handler for ethernet ip #
    await service_handler(config, re_obj, config.ethernet_ip, config.ethernet_ip_custom,
                          ethernet_ip_path, arg_list)
