""" Built-in modules """
import logging
# Custom modules #
from Modules.utils import cmd_parser, system_cmd


def wins_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 logger: logging.Logger):
    # Set the wins output file path #
    wins_path = paths[3] / 'wins_out.txt'

    # Iterate through wins commands from yaml file #
    for command in config.wins:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=wins_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=wins_path)


def dns_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                logger: logging.Logger):
    # Set the dns output file path #
    dns_path = paths[3] / 'dns_out.txt'

    # Iterate through dns commands from yaml file #
    for command in config.dns:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=dns_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=dns_path)


def kerbv5_ticket_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                          logger: logging.Logger):
    # Set the kerberos v5 ticket output file path #
    kerbv5_ticket_path = paths[3] / 'kerbv5_ticket_out.txt'

    # Iterate through kerberos v5 ticket commands from yaml file #
    for command in config.kerberos_v5_ticket:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=kerbv5_ticket_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=kerbv5_ticket_path)


def rpc_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                logger: logging.Logger):
    # Set the rpc output file path #
    rpc_path = paths[3] / 'rpc_out.txt'

    # Iterate through rpc commands from yaml file #
    for command in config.rpc:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=rpc_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=rpc_path)


def ntp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                logger: logging.Logger):
    # Set the ntp output file path #
    ntp_path = paths[3] / 'ntp_out.txt'

    # Iterate through ntp commands from yaml file #
    for command in config.ntp:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=ntp_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=ntp_path)


def msrpc_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                  logger: logging.Logger):
    # Set the msrpc output file path #
    msrpc_path = paths[3] / 'msrpc_out.txt'

    # Iterate through msrpc commands from yaml file #
    for command in config.msrpc:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=msrpc_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=msrpc_path)


def netbios_name_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                         logger: logging.Logger):
    # Set the netbios name output file path #
    netbios_name_path = paths[3] /'netbios_name_out.txt'

    # Iterate through netbios name commands from yaml file #
    for command in config.netbios_name:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=netbios_name_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=netbios_name_path)


def netbios_sesh_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                         logger: logging.Logger):
    # Set the netbios session output file name #
    netbios_sesh_path = paths[3] / 'netbios_sesh_out.txt'

    # Iterate through netbios session commands from yaml file #
    for command in config.netbios_sesh:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=netbios_sesh_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=netbios_sesh_path)


def snmp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 logger: logging.Logger):
    # Set the snmp output file path #
    snmp_path = paths[3] / 'snmp_out.txt'

    # Iterate through snmp commands from yaml file #
    for command in config.snmp:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=snmp_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=snmp_path)


def ldap_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 logger: logging.Logger):
    # Set the ldap output file path #
    ldap_path = paths[3] / 'ldap_out.txt'

    # Iterate through ldap commands from yaml file #
    for command in config.ldap:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=ldap_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=ldap_path)


def kerbv4_ticket_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                          logger: logging.Logger):
    # Set the kerberos v4 ticket output file path #
    kerbv4_ticket_path = paths[3] / 'kerbv4_ticket_out.txt'

    # Iterate through kerberos v5 ticket commands from yaml file #
    for command in config.kerberos_v4_ticket:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=kerbv4_ticket_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=kerbv4_ticket_path)


def kerbv4_admin_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                         logger: logging.Logger):
    # Set the kerberos v4 admin output file path #
    kerbv4_admin_path = paths[3] / 'kerbv4_admin_out.txt'

    # Iterate through kerberos v4 admin commands from yaml file #
    for command in config.kerberos_v4_admin:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=kerbv4_admin_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=kerbv4_admin_path)


def windomain_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                      logger: logging.Logger):
    # Set the winddomain output file path #
    windomain_path = paths[3] / 'windomain_out.txt'

    # Iterate through windows domain commands from yaml file #
    for command in config.windomain_indicator:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=windomain_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=windomain_path)


def oracle_agent_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                         logger: logging.Logger):
    # Set the oracle agent output file path #
    oracle_agent_path = paths[3] / 'oracle_agent_out.txt'

    # Iterate through oracle agent commands from yaml file #
    for command in config.oracle_agent:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=oracle_agent_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=oracle_agent_path)


def nfs_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                logger: logging.Logger):
    # Set the nfs output file path #
    nfs_path = paths[3] / 'nfs_out.txt'

    # Iterate through nfs commands from yaml file #
    for command in config.nfs:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=nfs_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=nfs_path)


def globalcat_ldap_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                           re_obj: object, logger: logging.Logger):
    # Set the globalcat ldap output file path #
    globalcat_ldap_path = paths[3] / 'globalcat_ldap_out.txt'

    # Iterate through globalcat ldap commands from yaml file #
    for command in config.globalcat_ldap:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=globalcat_ldap_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=globalcat_ldap_path)


def upnotifyp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                      logger: logging.Logger):
    # Set the upnotifyp file path #
    upnotifyp_path = paths[3] / 'upnotifyp_out.txt'

    # Iterate through upnotifyp commands from yaml file #
    for command in config.upnotifyp:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=upnotifyp_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=upnotifyp_path)


def rsip_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 logger: logging.Logger):
    # Set the rsip output file path #
    rsip_path = paths[3] / 'rsip_out.txt'

    # Iterate through rsip commands from yaml file #
    for command in config.rsip:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=rsip_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=rsip_path)


def wsdapi_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                   logger: logging.Logger):
    # Set the wsdapi output file path #
    wsdapi_path = paths[3] / 'wsdapi_out.txt'

    # Iterate through wsdapi commands from yaml file #
    for command in config.wsdapi:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=wsdapi_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=wsdapi_path)


def dfsr_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 logger: logging.Logger):
    # Set the dfsr output file path #
    dfsr_path = paths[3] / 'dfsr_out.txt'

    # Iterate through dfsr commands from yaml file #
    for command in config.dfsr:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=dfsr_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=dfsr_path)


def wrms_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 logger: logging.Logger):
    # Set the wrms output file path #
    wrms_path = paths[3] / 'wrms_out.txt'

    # Iterate through wrms commands from yaml file #
    for command in config.wrms:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=wrms_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=wrms_path)
