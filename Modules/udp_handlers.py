""" Custom modules """
from Modules.utils import service_handler


async def dhcp_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the dhcp out file path #
    dhcp_path = paths[2] / 'dhcp_out.txt'
    # Execute service handler for dhcp #
    await service_handler(config, re_obj, config.dhcp, config.dhcp_custom, dhcp_path, arg_list)


async def tftp_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the tftp output file path #
    tftp_path = paths[2] / 'tftp_out.txt'
    # Execute service handler for tftp #
    await service_handler(config, re_obj, config.tftp, config.tftp_custom, tftp_path, arg_list)


async def ruserd_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the ruserd output file path #
    ruserd_path = paths[2] / 'ruserd_out.txt'
    # Execute service handler for ruserd #
    await service_handler(config, re_obj, config.ruserd, config.ruserd_custom,
                          ruserd_path, arg_list)


async def ws_discovery_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the ws discovery output file path #
    ws_discovery_path = paths[2] / 'ws_discovery_out.txt'
    # Execute service handler for ws discovery #
    await service_handler(config, re_obj, config.ws_discovery, config.ws_discovery_custom,
                          ws_discovery_path, arg_list)


async def mdns_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the mdns output file path #
    mdns_path = paths[2] / 'mdns_out.txt'
    # Execute service handler for mdns #
    await service_handler(config, re_obj, config.mdns, config.mdns_custom, mdns_path, arg_list)


async def bacnet_handler(paths: tuple, config: object, re_obj: object, arg_list: list):
    # Set the bacnet output file path #
    bacnet_path = paths[2] / 'bacnet_out.txt'
    # Execute service handler for bacnet #
    await service_handler(config, re_obj, config.bacnet, config.bacnet_custom,
                          bacnet_path, arg_list)
