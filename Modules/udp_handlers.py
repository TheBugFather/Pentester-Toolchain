""" Built-in modules """
import logging
# Custom modules #
from Modules.utils import cmd_parser, system_cmd


def dhcp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 logger: logging.Logger):
    # Set the dhcp out file path #
    dhcp_path = paths[2] / 'dhcp_out.txt'

    # Iterate through dhcp commands from yaml file #
    for command in config.dhcp:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if True in args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=dhcp_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=dhcp_path)


def tftp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 logger: logging.Logger):
    # Set the tftp output file path #
    tftp_path = paths[2] / 'tftp_out.txt'

    # Iterate through tftp commands from yaml file #
    for command in config.tftp:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if True in args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=tftp_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=tftp_path)


def kerbv5_passwd_udp_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                              re_obj:object, logger: logging.Logger):
    # Set the kerberos v5 passwd udp output file path #
    kerbv5_passwd_udp_path = paths[2] / 'kerbv5_passwd_udp_out.txt'

    # Iterate through kerberos v5 passwd udp commands from yaml file #
    for command in config.kerberos_v5_passwd_udp:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if True in args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=kerbv5_passwd_udp_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=kerbv5_passwd_udp_path)


def kerbv5_ticket_udp_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                              re_obj: object, logger: logging.Logger):
    # Set the kerberos v5 ticket udp output file path #
    kerbv5_ticket_udp_path = paths[2] / 'kerbv5_ticket_udp_out.txt'

    # Iterate through kerberos v5 ticket udp commands from yaml file #
    for command in config.kerberos_v5_ticket_udp:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if True in args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=kerbv5_ticket_udp_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=kerbv5_ticket_udp_path)


def mdns_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 logger: logging.Logger):
    # Set the mdns output file path #
    mdns_path = paths[2] / 'mdns_out.txt'

    # Iterate through mdns commands from yaml file #
    for command in config.mdns:
        # Check to see if command has delimiter to parse #
        args = [True if delimiter in command else False for delimiter in config.delimiters]

        # If args are to be parsed in command #
        if True in args:
            cmd = cmd_parser(command, re_obj, ip_addr, port_num)
            system_cmd(cmd.split(), None, None, logger, out_file=mdns_path)
        # If command has no args to parse #
        else:
            system_cmd(command.split(), None, None, logger, out_file=mdns_path)
