""" Custom modules """
from Modules.utils import service_handler


def dhcp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the dhcp out file path #
    dhcp_path = paths[2] / 'dhcp_out.txt'
    # Execute service handler for dhcp #
    service_handler(config, re_obj, log_tuple, config.dhcp, config.dhcp_custom, dhcp_path,
                    [ip_addr, port_num])


def tftp_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the tftp output file path #
    tftp_path = paths[2] / 'tftp_out.txt'
    # Execute service handler for tftp #
    service_handler(config, re_obj, log_tuple, config.tftp, config.tftp_custom, tftp_path,
                    [ip_addr, port_num])


def kerbv5_passwd_udp_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                              re_obj:object, log_tuple: tuple):
    # Set the kerberos v5 passwd udp output file path #
    kerbv5_passwd_udp_path = paths[2] / 'kerbv5_passwd_udp_out.txt'
    # Execute service handler for kerberos V5 passwd udp #
    service_handler(config, re_obj, log_tuple, config.kerberos_v5_passwd_udp,
                    config.kerberos_v5_passwd_udp_custom, kerbv5_passwd_udp_path,
                    [ip_addr, port_num])


def ipsec_ike_vpn_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                          re_obj: object, log_tuple: tuple):
    # Set the ipsec ike vpn output file path #
    ipsec_ike_vpn_path = paths[2] / 'ipsec_ike_vpn_out.txt'
    # Execute service handler for ipsec ike vpn #
    service_handler(config, re_obj, log_tuple, config.ipsec_ike_vpn, config.ipsec_ike_vpn_custom,
                    ipsec_ike_vpn_path, [ip_addr, port_num])


def ruserd_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                   log_tuple: tuple):
    # Set the ruserd output file path #
    ruserd_path = paths[2] / 'ruserd_out.txt'
    # Execute service handler for ruserd #
    service_handler(config, re_obj, log_tuple, config.ruserd, config.ruserd_custom, ruserd_path,
                    [ip_addr, port_num])


def ws_discovery_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                         log_tuple: tuple):
    # Set the ws discovery output file path #
    ws_discovery_path = paths[2] / 'ws_discovery_out.txt'
    # Execute service handler for ws discovery #
    service_handler(config, re_obj, log_tuple, config.ws_discovery, config.ws_discovery_custom,
                    ws_discovery_path, [ip_addr, port_num])


def kerbv5_ticket_udp_handler(ip_addr: str, paths: tuple, port_num: int, config: object,
                              re_obj: object, log_tuple: tuple):
    # Set the kerberos v5 ticket udp output file path #
    kerbv5_ticket_udp_path = paths[2] / 'kerbv5_ticket_udp_out.txt'
    # Execute service handler for kerberos V5 ticket udp #
    service_handler(config, re_obj, log_tuple, config.kerberos_v5_ticket_udp,
                    config.kerberos_v5_ticket_udp_custom, kerbv5_ticket_udp_path,
                    [ip_addr, port_num])


def mdns_handler(ip_addr: str, paths: tuple, port_num: int, config: object, re_obj: object,
                 log_tuple: tuple):
    # Set the mdns output file path #
    mdns_path = paths[2] / 'mdns_out.txt'
    # Execute service handler for mdns #
    service_handler(config, re_obj, log_tuple, config.mdns, config.mdns_custom, mdns_path,
                    [ip_addr, port_num])
